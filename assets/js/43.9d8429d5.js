(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{524:function(t,e,s){t.exports=s.p+"assets/img/kvc_set.6c746da5.png"},525:function(t,e,s){t.exports=s.p+"assets/img/kvc_get.dce88eb3.png"},586:function(t,e,s){"use strict";s.r(e);var a=s(2),n=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"kvc-基本使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#kvc-基本使用"}},[t._v("#")]),t._v(" KVC 基本使用")]),t._v(" "),e("p",[t._v("KVC 全称是 Key-Value Coding，中文意思是“键值编码”，可以通过一个字符串来访问某个属性。它的基本使用如下：")]),t._v(" "),e("div",{staticClass:"language-objc line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-objc"}},[e("code",[t._v("MJPerson "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("person "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MJPerson alloc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" init"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("person setValue"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("@")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v(" forKey"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"age"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"%d"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("person valueForKey"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"age"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("p",[t._v("基础 API 如下：")]),t._v(" "),e("ul",[e("li",[t._v("setValue:forKey:")]),t._v(" "),e("li",[t._v("valueForKey:")]),t._v(" "),e("li",[t._v("setValue:forKeyPath:")]),t._v(" "),e("li",[t._v("valueForKeyPath:")])]),t._v(" "),e("h2",{attrs:{id:"kvc-setvalue-流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#kvc-setvalue-流程"}},[t._v("#")]),t._v(" KVC setValue 流程")]),t._v(" "),e("p",[t._v("在调用 setValue:forKey: 和 setValue:forKeyPath: 时，是会触发 KVO 的。下面我们来分析一下原理。")]),t._v(" "),e("p",[t._v("当调用 setValue:forKey:设置属性 value 时，其底层的执行流程为")]),t._v(" "),e("p",[t._v("【第一步】首先查找是否有这三种 setter 方法，按照查找顺序为 set"),e("Key",[t._v("：-> _set"),e("Key",[t._v(" -> setIs"),e("Key")],1)],1)],1),t._v(" "),e("p",[t._v("如果有其中任意一个 setter 方法，则直接设置属性的 value（主注意：key 是指成员变量名，首字符大小写需要符合 KVC 的命名规范）")]),t._v(" "),e("p",[t._v("如果都没有，则进入【第二步】")]),t._v(" "),e("p",[t._v("【第二步】：如果没有第一步中的三个简单的 setter 方法，则查找 accessInstanceVariablesDirectly 是否返回 YES，")]),t._v(" "),e("p",[t._v("如果返回 YES，则查找间接访问的实例变量进行赋值，查找顺序为：_"),e("key",[t._v(" -> _is"),e("Key",[t._v(" -> "),e("key",[t._v(" -> is"),e("Key")],1)],1)],1)],1),t._v(" "),e("p",[t._v("如果找到其中任意一个实例变量，则赋值")]),t._v(" "),e("p",[t._v("如果都没有，则进入【第三步】")]),t._v(" "),e("p",[t._v("如果返回 NO，则进入【第三步】")]),t._v(" "),e("p",[t._v("【第三步】如果 setter 方法 或者 实例变量都没有找到，系统会执行该对象的 setValue：forUndefinedKey:方法，默认抛出 NSUndefinedKeyException 类型的异常")]),t._v(" "),e("p",[e("img",{attrs:{src:s(524),alt:"KVC_Set"}})]),t._v(" "),e("h2",{attrs:{id:"kvc-getvalue-流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#kvc-getvalue-流程"}},[t._v("#")]),t._v(" KVC getValue 流程")]),t._v(" "),e("p",[t._v("当调用 valueForKey：时，其底层的执行流程如下")]),t._v(" "),e("p",[t._v("【第一步】首先查找 getter 方法，按照 get"),e("Key",[t._v(" -> "),e("key",[t._v(" -> is"),e("Key",[t._v(" -> _"),e("key",[t._v("的方法顺序查找，")])],1)],1)],1)],1),t._v(" "),e("p",[t._v("如果找到，则进入【第五步】")]),t._v(" "),e("p",[t._v("如果没有找到，则进入【第二步】")]),t._v(" "),e("p",[t._v("【第二步】如果还没有找到，检查类方法 accessInstanceVariablesDirectly 是否 YES，依次搜索_"),e("key",[t._v("，_is"),e("Key",[t._v("，"),e("key",[t._v("或 is"),e("Key",[t._v("的实例变量")])],1)],1)],1)],1),t._v(" "),e("p",[t._v("如果搜到，直接获取实例变量的值，进入【第三步】")]),t._v(" "),e("p",[t._v("【第三步】根据搜索到的属性值的类型，返回不同的结果")]),t._v(" "),e("p",[t._v("如果是对象指针，则直接返回结果")]),t._v(" "),e("p",[t._v("如果是 NSNumber 支持的标量类型，则将其存储在 NSNumber 实例中并返回它")]),t._v(" "),e("p",[t._v("如果是是 NSNumber 不支持的标量类型，请转换为 NSValue 对象并返回该对象")]),t._v(" "),e("p",[t._v("【第四步】如果上面几步的方法均失败，系统会执行该对象的 valueForUndefinedKey:方法，默认抛出 NSUndefinedKeyException 类型的异常")]),t._v(" "),e("p",[e("img",{attrs:{src:s(525),alt:"KVC_Get"}})])])}),[],!1,null,null,null);e.default=n.exports}}]);