(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{594:function(s,a,e){"use strict";e.r(a);var t=e(2),n=Object(t.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),a("p",[s._v("Runtime 作用是什么？最大的作用当然是："),a("strong",[s._v("将 Objective-C 对象、方法、协议用 C 语言来解释")]),s._v("因此，笔者打算先简单分享这方面的知识点，更深入的留到后续部分再聊。")]),s._v(" "),a("p",[s._v("NSObject 对象是 iOS 开发者都很熟悉的对象，它几乎是所有对象的根类。在任何.m 文件中输入以下代码：")]),s._v(" "),a("div",{staticClass:"language-nginx line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-nginx"}},[a("code",[s._v("NSObject\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("点击"),a("code",[s._v("NSObject")]),s._v("跳转到其定义文件，发现如下声明：")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("@interface NSObject "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("NSObject"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#pragma clang diagnostic push")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#pragma clang diagnostic ignored "-Wobjc-interface-ivars"')]),s._v("\n    Class isa  OBJC_ISA_AVAILABILITY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#pragma clang diagnostic pop")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("其中"),a("code",[s._v("#pragma clang diagnostic push")]),s._v("用于去除警告，因此，我们能发现 NSObject 对象只有一个"),a("code",[s._v("Class")]),s._v("类型的成员变量："),a("code",[s._v("isa")]),s._v("。"),a("br"),s._v("\n那么：")]),s._v(" "),a("ul",[a("li",[s._v("什么是"),a("code",[s._v("isa")])]),s._v(" "),a("li",[s._v("什么是"),a("code",[s._v("Class")]),s._v("类型，与"),a("code",[s._v("class")]),s._v(" 方法有何区别")])]),s._v(" "),a("p",[s._v("这篇文章将要给大家揭晓该问题。")]),s._v(" "),a("h2",{attrs:{id:"关于-class"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于-class"}},[s._v("#")]),s._v(" 关于 Class")]),s._v(" "),a("p",[s._v("我们知道任何一个类都有 "),a("code",[s._v("class")]),s._v("方法比如：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("[NSObject class];\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("当然还有"),a("code",[s._v("superclass")]),s._v("方法：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("[NSObject superclass];\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("更多和 class 相关的方法列举如下：")]),s._v(" "),a("div",{staticClass:"language-markdown line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-markdown"}},[a("code",[a("span",{pre:!0,attrs:{class:"token list punctuation"}},[s._v("-")]),s._v("   (BOOL)isKindOfClass:(Class)aClass;\n"),a("span",{pre:!0,attrs:{class:"token list punctuation"}},[s._v("-")]),s._v("   (BOOL)isMemberOfClass:(Class)aClass;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("这两个方法相信大家都不陌生，只不过这两个方法位于"),a("code",[s._v("@protocol NSObject")]),s._v("中，但"),a("code",[s._v("NSObject")]),s._v("中还是有其实现的。所以我们有理由相信，"),a("code",[s._v("NSObject")]),s._v("中的成员变量"),a("code",[s._v("isa")]),s._v("是有特殊含义的，点击改成员变量的类型"),a("code",[s._v("Class")]),s._v("我们可以看到其定义：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("typedef struct objc_class *Class;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("继续点击"),a("code",[s._v("objc_class")]),s._v("：")]),s._v(" "),a("div",{staticClass:"language-swift line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" objc_class "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" objc_object "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//这里省略成员变量以及方法...")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("再次点击"),a("code",[s._v("objc_object")]),s._v("：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("struct objc_object {\nprivate:\nisa_t isa;\n//这里省略成员变量以及方法...\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("层次有点深，但大家只关注其结构即可：")]),s._v(" "),a("blockquote",[a("p",[a("code",[s._v("Class")]),s._v("本质是一个结构体。")])]),s._v(" "),a("p",[s._v("画个图总结一下："),a("br"),s._v(" "),a("img",{attrs:{src:"https://images.xiaozhuanlan.com/photo/2018/c83aa9f019577a9fef7b3e76f21c09d6.png",alt:"NSObject内部类继承图表"}})]),s._v(" "),a("p",[s._v("NSObject 内部类继承图表")]),s._v(" "),a("p",[s._v("关于结构体，大家应该都有所了解，这里再做个复习吧："),a("br"),s._v("\nC 语言和 C++ 都支持结构体，只是 C++ 的结构体基本上和类没有区别。以下是摘自知乎某答主：")]),s._v(" "),a("blockquote",[a("p",[a("strong",[s._v("结构体和类的区别")]),a("br"),s._v("\n本质上来说结构体与类是同一个东西，可是默认情况下基于可读性的原因还是加一些区分："),a("br"),s._v("\n结构体就只含数据成员和构造函数、析构函数，尽可能保持简单。"),a("br"),s._v("\n类则包含更多的非构造、析构成员函数，概念更大，用来描述普遍意义上的对象类型。")])]),s._v(" "),a("p",[s._v("我们有理由相信："),a("code",[s._v("NSObject")]),s._v("对象的各个方法，基本上是针对其结构体 isa 对象的操作。这里我们研究几个我们常用的方法：")]),s._v(" "),a("h2",{attrs:{id:"是否同一个类-ismemberofclass"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#是否同一个类-ismemberofclass"}},[s._v("#")]),s._v(" 是否同一个类(isMemberOfClass)")]),s._v(" "),a("div",{staticClass:"language-php line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-php"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword type-casting"}},[s._v("BOOL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("isMemberOfClass"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("cls "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" cls"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("很简单，判断一下，当前的 class 方法是否等于参数。"),a("br"),s._v("\n因为"),a("code",[s._v("self")]),s._v("是"),a("code",[s._v("NSObjec")]),s._v("t 对象，因此我们查看"),a("code",[s._v("class")]),s._v("方法：")]),s._v(" "),a("div",{staticClass:"language-ruby line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" object_getClass"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("其定义如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Class object_getClass(id obj)\n{\nif (obj) return obj->getIsa();\nelse return Nil;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("点击"),a("code",[s._v("object_getClass")]),s._v(" 我们可以看到，这个方法位于文件 objc_object.h 中，而且有两个定义："),a("br"),s._v(" "),a("img",{attrs:{src:"https://images.xiaozhuanlan.com/photo/2021/bbd3d276a1f499d74f49c0d0980fe613.png",alt:"两个 getIsa 方法"}})]),s._v(" "),a("p",[s._v("两个 getIsa 方法")]),s._v(" "),a("p",[s._v("如图我们暂时不看上面那个 getIsa，因为他是支持 Tagged Pointers 的版本，关于 Tagged Pointers 是另外一个主题，我们后面会讲到，现在我们先看不支持 Tagged Pointers 的，也就是如下定义：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("inline Class\nobjc_object::getIsa()\n{\nif (!isTaggedPointer()) return ISA();\nuintptr_t ptr = (uintptr_t)this;\nif (isExtTaggedPointer()) {\nuintptr_t slot =\n            (ptr >> _OBJC_TAG_EXT_SLOT_SHIFT) & _OBJC_TAG_EXT_SLOT_MASK;\nreturn objc_tag_ext_classes[slot];\n    } else {\nuintptr_t slot =\n            (ptr >> _OBJC_TAG_SLOT_SHIFT) & _OBJC_TAG_SLOT_MASK;\nreturn objc_tag_classes[slot];\n    }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("可以发现，越牵扯越深，阅读有点困难了。但大家别着急，我们可以屏蔽")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("if (!isTaggedPointer()) return ISA();\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("以下的代码，因为我们不支持 Tagged Pointer。上面的代码于是可以先简化成：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("inline Class\nobjc_object::getIsa()\n{\nif (!isTaggedPointer()) return ISA();\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("所以，我们只需要继续研究"),a("code",[s._v("ISA()")]),s._v("方法：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("inline Class\nobjc_object::ISA()\n{\n    assert(!isTaggedPointer());\n#if SUPPORT_INDEXED_ISA\nif (isa.nonpointer) {\nuintptr_t slot = isa.indexcls;\nreturn classForIndex((unsigned)slot);\n    }\nreturn (Class)isa.bits;\n#else\nreturn (Class)(isa.bits & ISA_MASK);\n#endif\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("同样去掉暂时不需要我们理解的部分，简化代码如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("inline Class\nobjc_object::ISA()\n{\nreturn (Class)(isa.bits & ISA_MASK);\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("至此，我们可以看到 class 方法最终获取的即是：结构体"),a("code",[s._v("objc_object")]),s._v("的"),a("code",[s._v("isa.bits & ISA_MASK")]),s._v("的结果。"),a("br"),s._v("\n那，大家的疑问也会随之而来：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("inline")]),s._v(" 关键字作用，为何这里的几个方法实现都在"),a("code",[s._v(".h")]),s._v("文件中")]),s._v(" "),a("li",[s._v("在方法："),a("code",[s._v("objc_object::ISA()")]),s._v(" 中双冒号的作用。")]),s._v(" "),a("li",[a("code",[s._v("objc_object")]),s._v(" 中的"),a("code",[s._v("isa")]),s._v("又是什么")]),s._v(" "),a("li",[a("code",[s._v("isa.bits")]),s._v(" & "),a("code",[s._v("ISA_MASK")]),s._v(" 的含义")])]),s._v(" "),a("h3",{attrs:{id:"inline-关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#inline-关键字"}},[s._v("#")]),s._v(" inline 关键字")]),s._v(" "),a("blockquote",[a("p",[s._v("用来定义一个类的内联函数，引入它的主要原因是用它替代 C 中表达式形式的宏定义。")])]),s._v(" "),a("p",[s._v("也就是说，用"),a("code",[s._v("inline")]),s._v("关键字修饰的是内联函数，内联函数用于替代宏定义。取代宏定义的原因是：")]),s._v(" "),a("blockquote",[a("ol",[a("li",[s._v("C 中使用 define 这种形式宏定义的原因是因为，C 语言是一个效率很高的语言，这种宏定义在形式及使用上像一个函数，但它使用预处理器实现，没有了参数压栈，代码生成等一系列的操作,因此，效率很高，这是它在 C 语言中被使用的一个主要原因。")]),s._v(" "),a("li",[s._v("这种宏定义在形式上类似于一个函数，但在使用它时，仅仅只是做预处理器符号表中的简单替换，因此它不能进行参数有效性的检测，也就不能享受 C++ 编译器严格类型检查的好处，另外它的返回值也不能被强制转换为可转换的合适的类型，这样，它的使用就存在着一系列的隐患和局限性。")]),s._v(" "),a("li",[s._v("在 C++ 中引入了类及类的访问控制，这样，如果一个操作或者说一个表达式涉及到类的保护成员或私有成员，你就不可能使用这种宏定义来实现(因为无法将 this 指针放在合适的位置)。")]),s._v(" "),a("li",[s._v("inline 推出的目的，也正是为了取代这种表达式形式的宏定义，它消除了宏定义的缺点，同时又很好地继承了宏定义的优点。")])])]),s._v(" "),a("h3",{attrs:{id:"双冒号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#双冒号"}},[s._v("#")]),s._v(" 双冒号")]),s._v(" "),a("blockquote",[a("p",[s._v("用于表示“域操作符”，例：声明了一个类 A，类 A 里声明了一个成员函数 void f()，但没有在类的声明里给出 f 的定义，那么在类外定义 f 时，就要写成 void A::f()，表示这个 f()函数是类 A 的成员函数。")])]),s._v(" "),a("h3",{attrs:{id:"objc-object-中的-isa"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#objc-object-中的-isa"}},[s._v("#")]),s._v(" objc_object 中的 isa")]),s._v(" "),a("p",[s._v("之前我们已经写了"),a("code",[s._v("objc_object")]),s._v("的定义，可以知道，isa 其实是一个"),a("code",[s._v("isa_t")]),s._v("的对象，那"),a("code",[s._v("isa_t")]),s._v("是什么呢，我们继续看一下它的实现：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("union isa_t\n{\n//这里省略很多变量\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("可以知道，"),a("code",[s._v("isa_t")]),s._v("是个联合体,也就是说："),a("code",[s._v("objc_object")]),s._v(" 中的"),a("code",[s._v("isa")]),s._v("其实是个联合体")]),s._v(" "),a("h3",{attrs:{id:"isa-bits-isa-mask-含义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#isa-bits-isa-mask-含义"}},[s._v("#")]),s._v(" isa.bits & ISA_MASK 含义")]),s._v(" "),a("p",[s._v("上面我们知道，"),a("code",[s._v("isa")]),s._v("是个联合体，其内部的属性 bits 呢？")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("union isa_t\n{\n//省略部分方法和属性...\nuintptr_t bits;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("然后看"),a("code",[s._v("uintptr_t")]),s._v("实现：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("typedef unsigned long        uintptr_t;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("发现其是个"),a("code",[s._v("unsigned long")]),s._v("类型，而"),a("code",[s._v("ISA_MASK")]),s._v("的定义如下：")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# if __arm64__")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   define ISA_MASK        0x0000000ffffffff8ULL")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# elif __x86_64__")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   define ISA_MASK        0x00007ffffffffff8ULL")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# else")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   error unknown architecture for packed isa")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# endif")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("可知，其实"),a("code",[s._v("ISA_MASK")]),s._v("还是个数值类型。也就是说判断两个对象是否是同一个"),a("code",[s._v("class")]),s._v("其实是通过比对"),a("code",[s._v("objc_object")]),s._v("中的数值计算后得出的结果是否相等得出的。")]),s._v(" "),a("p",[s._v("于是，我们上面的类继承图表又可以做如下完善："),a("br"),s._v(" "),a("img",{attrs:{src:"https://images.xiaozhuanlan.com/photo/2018/b8b1c56e5b97dafdd95d0400f08e64c2.png",alt:""}})]),s._v(" "),a("p",[s._v("讲完了 "),a("code",[s._v("isMemberOfClass")]),s._v("方法，"),a("code",[s._v("isKindOfClass")]),s._v("方法这里就不多做介绍了，给出其源代码即可：")]),s._v(" "),a("h2",{attrs:{id:"是否父子类关系-iskindofclass"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#是否父子类关系-iskindofclass"}},[s._v("#")]),s._v(" 是否父子类关系(isKindOfClass)")]),s._v(" "),a("p",[s._v("其实现如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("+ (BOOL)isKindOfClass:(Class)cls {\nfor (Class tcls = object_getClass((id)self); tcls; tcls = tcls->superclass) {\nif (tcls == cls) return YES;\n    }\nreturn NO;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("Class")]),s._v("类型本质是个结构体，该结构体中存储了该"),a("code",[s._v("NSObject")]),s._v("中的所有信息。")]),s._v(" "),a("li",[s._v("比对两个类是否是同一个类，其实是判断"),a("code",[s._v("Class")]),s._v("中的某个数值运算的结果是否相等。")])]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("NSObject 的对象对外暴露的属性就只有 isa，重要性不言而喻。"),a("br"),s._v("\nisa 是一个 Class 类型的变量，他在 objc.h 中有定义，其实是个结构体指针，结构体名字为：objc_class。目前我们还不知道这个结构体的作用，但我们相信随着我们逐渐深入的查看源码，他定会被我们一览无余。"),a("br"),s._v("\n果不其然，我们随便找一个方法 isMemberOfClass （作用是判断某个对象是否是某个类的成员），通过我们的刨根问底，终于发现，判断某个对象是否属于某个类，其实是通过 object_getClass 来实现的，而这个方法正好就是结构体 objc_object（objc_class 子类） 中的方法。")]),s._v(" "),a("h2",{attrs:{id:"结论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结论"}},[s._v("#")]),s._v(" 结论")]),s._v(" "),a("p",[s._v("目前我们已经知道这个 object_getClass 类型的一个实例是 NSObject 类的成员变量，而且 NSObject 类的 class 方法，以及一切和 class 相关的方法，比如 isMemerOfClass，都是 objc_object 他来管理的。")])])}),[],!1,null,null,null);a.default=n.exports}}]);